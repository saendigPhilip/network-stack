cmake_minimum_required(VERSION 3.10)
project(client_server_twosided)

set(CMAKE_CXX_STANDARD 14)

add_definitions(-Wall -Wextra -Wpedantic -Wsign-conversion -Wunused)
add_definitions(-Wno-unused-function -Wno-deprecated-declarations)
add_definitions(-Wno-format -Wno-format-security)
add_definitions(-msse4.1)

# Libraries that are required:
set(LIBRARIES ${LIBRARIES} -pthread numa dl ibverbs ssl crypto)


# Some paths:
# These two paths might need to be changed:
if(DIMITRA_SCONE)
  message(STATUS "Compiled w/ SCONE")
  add_definitions(-DSCONE)
  set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -DSCONE")
  # include_directories(${CMAKE_SOURCE_DIR}/../../anchor-eRPC/eRPC/dpdk_scone/usr/include/dpdk)
  # link_directories(${CMAKE_SOURCE_DIR}/eRPC/dpdk_scone/usr/lib)
  set(ERPC "../../anchor-eRPC/eRPC") #"/home/$ENV{USER}/workspace/anchor/network-stack/client_server_twosided/eRPC")
  set(DPDK_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../../anchor-eRPC/eRPC/dpdk_scone/x86_64-native-linuxapp-gcc)

  # set(ERPC "/home/${USER}/eRPC/build")
else()
  set(ERPC "${CMAKE_CURRENT_SOURCE_DIR}/eRPC4dpdk")
  set(DPDK_PATH ${CMAKE_CURRENT_SOURCE_DIR}/dpdk_static)
endif()
message(STATUS "eRPC-path: ${ERPC}")

set(SRC ${CMAKE_CURRENT_SOURCE_DIR}/src)
set(TESTS ${CMAKE_CURRENT_SOURCE_DIR}/tests)


# User options:
set(DEBUG "OFF" CACHE STRING "Enable debugging options (ON/OFF)")
set(MEASURE_LATENCY "ON" CACHE STRING "Measure latency (ON/OFF)")
set(REAL_KV "OFF" CACHE STRING "Real KV-store at server for tests (ON/OFF)")
set(ENCRYPT "ON" CACHE STRING "Enable encryption (ON/OFF)")
set(TRANSPORT "dpdk" CACHE STRING "Datapath transport (infiniband/dpdk)")


string(TOUPPER ${DEBUG} DEBUG)
if (${DEBUG} STREQUAL "ON")
  message(STATUS "Debugging enabled. Compiling with address sanitizer")
  add_definitions(-g -fsanitize=address)
  link_libraries(-fsanitize=address)
else()
  message(STATUS "Debugging disabled")
  add_definitions(-O2)
endif()


string(TOUPPER ${MEASURE_LATENCY} MEASURE_LATENCY)
if(${MEASURE_LATENCY} STREQUAL "ON")
  add_definitions("-DMEASURE_LATENCY=true")
  message(STATUS "Latency measurement turned on")
else()
  add_definitions("-DMEASURE_LATENCY=false")
  message(STATUS "Latency measurement turned off")
endif()


string(TOUPPER ${REAL_KV} REAL_KV)
if(${REAL_KV} STREQUAL "ON")
  add_definitions("-DNO_KV_OVERHEAD=false")
  message(STATUS "Using std::map as a KV-store at the server")
else()
  add_definitions("-DNO_KV_OVERHEAD=true")
  message(STATUS "KV-store operations are constant")
endif()


string(TOUPPER ${ENCRYPT} ENCRYPT)
if(${ENCRYPT} STREQUAL "OFF")
  message(STATUS "Warning: Encryption turned off")
  add_definitions("-DNO_ENCRYPTION=true")
else()
  message(STATUS "Encryption turned on")
  add_definitions("-DNO_ENCRYPTION=false")
endif()


add_definitions(-DERPC_DPDK=true)
link_libraries(erpc)

set(DPDK_LIB ${DPDK_PATH}/lib/libdpdk.a)

set(DPDK_INCLUDE_DIR ${DPDK_PATH}/include/)
message(STATUS "DPDK include directory = ${DPDK_INCLUDE_DIR}")
include_directories(SYSTEM ${DPDK_INCLUDE_DIR})
set(LIBRARIES 
  ${LIBRARIES} 
  -L${DPDK_PATH}/lib/ -ldpdk -ldl -lrte_ethdev -Wl,-lrte_port
  -libverbs)


include_directories(SYSTEM ${ERPC}/src)
include_directories(${SRC} ${TESTS})

link_directories(${ERPC}/build)


set(SERVER_SOURCE
  ${SRC}/client_server_common.cpp
  ${SRC}/Server.cpp
  ${SRC}/Server.h
  ${SRC}/ServerThread.cpp
  ${SRC}/ServerThread.h)

set(CLIENT_SOURCE
  ${SRC}/client_server_common.cpp
  ${SRC}/Client.cpp
  ${SRC}/Client.h
  ${SRC}/PendingRequestQueue.cpp
  ${SRC}/PendingRequestQueue.h
  ${SRC}/sent_message_tag.cpp
  ${SRC}/sent_message_tag.h)

set(TEST_UTILS
  ${TESTS}/test_common.cpp
  ${TESTS}/test_common.h
  ${TESTS}/simple_unit_test.h)

set(DPDK_LINKER_FLAGS
  -Wl,-lrte_flow_classify  
  -Wl,--whole-archive
    -Wl,-lrte_pipeline
    -Wl,-lrte_table
    -Wl,-lrte_port
  -Wl,--no-whole-archive
  -Wl,-lrte_pdump
  -Wl,-lrte_distributor
  -Wl,-lrte_ip_frag
  -Wl,-lrte_meter
  -Wl,-lrte_lpm
  -Wl,-lrte_acl
  -Wl,-lrte_jobstats
  -Wl,-lrte_metrics
  -Wl,-lrte_bitratestats
  -Wl,-lrte_latencystats
  -Wl,-lrte_power
  -Wl,-lrte_efd
  -Wl,--whole-archive
    -Wl,-lrte_cfgfile
    -Wl,-lrte_gro
    -Wl,-lrte_gso
    -Wl,-lrte_hash
    -Wl,-lrte_member
    -Wl,-lrte_vhost
    -Wl,-lrte_kvargs
    -Wl,-lrte_mbuf
    -Wl,-lrte_net
    -Wl,-lrte_ethdev
    -Wl,-lrte_bbdev
    -Wl,-lrte_cryptodev
    -Wl,-lrte_security
    -Wl,-lrte_eventdev
    -Wl,-lrte_rawdev
    -Wl,-lrte_timer
    -Wl,-lrte_mempool
    -Wl,-lrte_mempool_ring
    -Wl,-lrte_ring
    -Wl,-lrte_pci
    -Wl,-lrte_eal
    -Wl,-lrte_cmdline
    -Wl,-lrte_reorder
    -Wl,-lrte_sched
    -Wl,-lrte_kni
    -Wl,-lrte_bus_pci
    -Wl,-lrte_bus_vdev
    -Wl,-lrte_mempool_stack
    -Wl,-lrte_pmd_af_packet
    -Wl,-lrte_pmd_ark
    -Wl,-lrte_pmd_avp
    -Wl,-lrte_pmd_bnxt
    -Wl,-lrte_pmd_bond
    -Wl,-lrte_pmd_cxgbe
    -Wl,-lrte_pmd_e1000
    -Wl,-lrte_pmd_ena
    -Wl,-lrte_pmd_enic
    -Wl,-lrte_pmd_fm10k
    -Wl,-lrte_pmd_failsafe
    -Wl,-lrte_pmd_i40e
    -Wl,-lrte_pmd_ixgbe
    -Wl,-lrte_pmd_kni
    -Wl,-lrte_pmd_lio
    -Wl,-lrte_pmd_nfp
    -Wl,-lrte_pmd_null
    -Wl,-lrte_pmd_qede
    -Wl,-lrte_pmd_ring
    -Wl,-lrte_pmd_softnic
    -Wl,-lrte_pmd_sfc_efx
    -Wl,-lrte_pmd_tap
    -Wl,-lrte_pmd_thunderx_nicvf
    -Wl,-lrte_pmd_vdev_netvsc
    -Wl,-lrte_pmd_virtio
    -Wl,-lrte_pmd_vhost
    -Wl,-lrte_pmd_vmxnet3_uio
    -Wl,-lrte_pmd_bbdev_null
    -Wl,-lrte_pmd_null_crypto
    -Wl,-lrte_pmd_crypto_scheduler
    -Wl,-lrte_pmd_skeleton_event
    -Wl,-lrte_pmd_sw_event
    -Wl,-lrte_pmd_octeontx_ssovf
    -Wl,-lrte_mempool_octeontx
    -Wl,-lrte_pmd_octeontx
    -Wl,-lrte_pmd_opdl_event
    -Wl,-lrte_pmd_skeleton_rawdev
  -Wl,--no-whole-archive
  -Wl,-lrt
  -Wl,-lm
  -Wl,-lnuma
  -Wl,-ldl
  -Wl,-export-dynamic
  -Wl,-export-dynamic)


# Finally build all tests and libraries:
add_library(anchorserver SHARED
  ${SOURCES}
  ${SERVER_SOURCE})

target_compile_options(anchorserver
  PRIVATE -fPIC)

target_link_libraries(anchorserver
  PRIVATE ${DPDK_LINKER_FLAGS})

target_link_libraries(anchorserver
  PRIVATE ${LIBRARIES})


add_library(anchorclient SHARED
  ${SOURCES}
  ${CLIENT_SOURCE})

target_compile_options(anchorclient
  PRIVATE -fPIC)

target_link_libraries(anchorclient
  PRIVATE ${DPDK_LINKER_FLAGS})

target_link_libraries(anchorclient
  PRIVATE ${LIBRARIES})


add_executable(server_test
  ${TEST_UTILS}
  ${TESTS}/server_test.cpp)

target_link_libraries(server_test
  PRIVATE anchorserver)


add_executable(client_test
  ${TEST_UTILS}
  ${TESTS}/client_test.cpp)

target_link_libraries(client_test
  PRIVATE anchorclient)


add_executable(server_perf_test
  ${TEST_UTILS}
  ${TESTS}/server_test_perf.cpp)

target_link_libraries(server_perf_test
  PRIVATE anchorserver pthread)


add_executable(client_perf_test
  ${TEST_UTILS}
  ${TESTS}/client_test_perf.cpp)

target_link_libraries(client_perf_test
  PRIVATE anchorclient pthread)


add_executable(encryption_test
  ${TEST_UTILS}
  ${TESTS}/encryption_test.cpp)

target_link_libraries(encryption_test
  PRIVATE anchorserver)

